class Filter():
	def __init__(self):
		self.filter_taps = [
  				0.003548249252672876,	0.002594349160607653,	-0.0015336948959665682, 
				0.00124974402779808,	-0.000989716336566947,	0.00027851871599426437,
  				-0.0010133009929300402,	-0.0005213962747323117,	-0.0013275811938037614, 
				-0.0012014112635941538,	-0.0017054193850941867,	-0.001699402595091069,
				-0.0019612587264426383,	-0.0019067224879905904,	-0.0019333494116660628, 
				-0.0017342839661648047,	-0.00151490964057314,	-0.0011298780861863779,
				-0.0006828143587297846,	-0.00011363074658130683,0.0005067006762442323, 
				0.0011994534520561903,	0.0019061788745372646,	0.002614073976018069,
				0.0032794530363936653,	0.003869337241027077,	0.004343172005957803, 
				0.0046703058706855025,	0.004812814619053665,	0.004748104019085895,
				0.004453449864171585,	0.003916721816512151,	0.003138446757436547, 
				0.002121896692311382,	0.0008938859225792116,	-0.0005203935322289378,
				-0.0020742919462751943,	-0.003713001524662775,	-0.005377965594422186, 
				-0.006991755989318235,	-0.008482516968733474,	-0.009767772709759476,
				-0.010767653951653503,	-0.01140397330619252,	-0.011605886636733346, 
				-0.011306559284832759,	-0.0104581838012205,	-0.00901708932398021,
				-0.006966909608186975,	-0.004298501432666772,	-0.0010300431394915845, 
				0.0028040911504086663,	0.007152939722898504,	0.011938682179015248,
				0.017078178630136845,	0.022461559332446646,	0.027977634573141206, 
				0.0334982357693978,		0.03889607632717719,	0.044040113582309436,
				0.04880158196847521,	0.05306244348143798,	0.05671162109042286, 
				0.05965330647484042,	0.06181508655650939,	0.06313111846713182,
				0.06357817025930267,	0.06313111846713182,	0.06181508655650939, 
				0.05965330647484042,	0.05671162109042286,	0.05306244348143798,
				0.04880158196847521,	0.044040113582309436,	0.03889607632717719, 
				0.0334982357693978,		0.027977634573141206,	0.022461559332446646,
				0.017078178630136845,	0.011938682179015248,	0.007152939722898504, 
				0.0028040911504086663,	-0.0010300431394915845,	-0.004298501432666772,
				-0.006966909608186975,	-0.00901708932398021,	-0.0104581838012205, 
				-0.011306559284832759,	-0.011605886636733346,	-0.01140397330619252,
				-0.010767653951653503,	-0.009767772709759476,	-0.008482516968733474, 
				-0.006991755989318235,	-0.005377965594422186,	-0.003713001524662775,
				-0.0020742919462751943,	-0.0005203935322289378,	0.0008938859225792116, 
				0.002121896692311382,	0.003138446757436547,	0.003916721816512151,
				0.004453449864171585,	0.004748104019085895,	0.004812814619053665, 
				0.0046703058706855025,	0.004343172005957803,	0.003869337241027077,
				0.0032794530363936653,	0.002614073976018069,	0.0019061788745372646, 
				0.0011994534520561903,	0.0005067006762442323,	-0.00011363074658130683,
				-0.0006828143587297846,	-0.0011298780861863779,	-0.00151490964057314, 
				-0.0017342839661648047,	-0.0019333494116660628,	-0.0019067224879905904,
				-0.0019612587264426383,	-0.001699402595091069,	-0.0017054193850941867, 
				-0.0012014112635941538,	-0.0013275811938037614,	-0.0005213962747323117,
				-0.0010133009929300402,	0.00027851871599426437,	-0.000989716336566947, 
				0.00124974402779808,	-0.0015336948959665682,	0.002594349160607653,
				0.003548249252672876]

	def filter(self, samples):
		if(len(samples) != len(self.filter_taps)):
			raise ValueError('Samples length not equal to filter_taps length')

		ask_price_samples = [sample['ask_price'] for sample in samples if 'ask_price' in sample]
		mid_price_samples = [sample['mid_price'] for sample in samples if 'mid_price' in sample]
		bid_price_samples = [sample['bid_price'] for sample in samples if 'bid_price' in sample]
		if(len(ask_price_samples) != len(samples) or len(mid_price_samples) != len(samples) or len(bid_price_samples) != len(samples)):
			raise ValueError('Not every sample as all three fields (ask_price, mid_price, bid_price)')

		ask_price = sum(map(lambda x,y:x*y, self.filter_taps, ask_price_samples))
		mid_price = sum(map(lambda x,y:x*y, self.filter_taps, mid_price_samples))
		bid_price = sum(map(lambda x,y:x*y, self.filter_taps, bid_price_samples))
		if('timestamp' not in samples[-1]):
			raise ValueError('Key timestamp does not exist in latest sample')
		timestamp = samples[-1]['timestamp']

		filtered_sample = {
			'ask_price' : ask_price, 
			'mid_price' : mid_price,
			'bid_price' : bid_price,
			'timestamp' : timestamp
		}
		return filtered_sample
